// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String?
  hashedPassword  String
  role            Role          @default(USER)
  company         Company?
  personalData    PersonalData?
  education       Education[]
  experience      Experience[]
  sendMessages    Messages[]    @relation(name: "sentMessages")
  receiveMessages Messages[]    @relation(name: "receiveMessages")
}

model Company {
  id        Int          @id @default(autoincrement())
  name      String
  industry  String?
  bio       String?
  website   String?
  linkedIn  String?
  instagram String?
  zip       String?
  country   String?
  city      String?
  state     String?
  size      CompanySize?
  startDate DateTime?
  userId    Int          @unique
  user      User         @relation(fields: [userId], references: [id])
  job       Job[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Education {
  id           Int       @id @default(autoincrement())
  institution  String
  degree       String
  fieldOfStudy String
  startDate    DateTime
  endDate      DateTime?
  description  String?
  isPursuing   Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id])
  userId       Int
}

model Experience {
  id             Int       @id @default(autoincrement())
  company        String
  jobTitle       String
  location       String
  startDate      DateTime
  endDate        DateTime?
  description    String?
  industry       String?
  employmentType String?
  isCurrent      Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  User           User      @relation(fields: [userId], references: [id])
  userId         Int
}

model PersonalData {
  id             Int              @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  dob            DateTime?
  street         String?
  country        String?
  phone          String?
  city           String?
  state          String?
  zipCode        String?
  bio            String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User             @relation(fields: [userId], references: [id])
  userId         Int              @unique
  savedJob       Job[]
  JobApplication JobApplication[]
}

model Job {
  id               Int              @id @default(autoincrement())
  title            String
  location         String
  salaryMin        String
  salaryMax        String
  employmentType   String
  workHour         String
  education        String
  deadline         DateTime
  skills           String
  jd               String           @db.VarChar(1000)
  qualification    String           @db.VarChar(1000)
  responsibilities String           @db.VarChar(1000)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  Company          Company          @relation(fields: [companyId], references: [id])
  companyId        Int
  PersonalData     PersonalData[]
  JobApplication   JobApplication[]
}

model JobApplication {
  id             Int          @id @default(autoincrement())
  jobId          Int
  personalDataId Int
  job            Job          @relation(fields: [jobId], references: [id])
  status         String       @default("pending")
  remarks        String?
  personalData   PersonalData @relation(fields: [personalDataId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Messages {
  id         Int      @id @default(autoincrement())
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation(name: "sentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation(name: "receiveMessages", fields: [receiverId], references: [id])
  receiverId Int
}
